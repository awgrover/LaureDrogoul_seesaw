#!/bin/bash
# Copy the image & setup: pi#, wifi 
# --- [/dev/microsdwholedevice] # just (re)-configure
# --- --init [dev] # dd the image
# Needs sudo

img=2015-02-16-raspbian-wheezy.img

set -e
set -x

if [ ! -e $img ]; then
    echo "There is no (assumed img) $img"
    exit 1
fi

init=''
if [ "$1" == "--init" ]; then
    init='--init'
    shift
fi

dev=$1
if [ "$dev" == "" ]; then
    # it was...
    dev=/dev/mmcblk0
fi

if [ ! -e $dev ]; then
    echo "Expected a device for the ssd, but '$dev' isn't there"
    exit 1
fi

if [ $UID != 0 ]; then
    echo -n "Which pi: 1|2 "
    read pi

    # Choose the 
    wificonf=`perl -an -e 'use File::Basename; /^\s+wpa-ssid/ && (print basename($ARGV)."<-".$F[1]." ")' etc/network/interfaces.d/*`
    echo -n "Which wifi at first boot: $wificonf ? "
    read wifi

    env WIFI=$wifi make rp$pi.tar

    # Need to be root for the rest

    # rerun ourselves with env OK, as sudo
    sudo -p 'sudo for disk ops, passwd: ' env WIFI=$WIFI PI=$pi $0 $init $dev
    exit $?
fi

echo "rooting.."

if [ "$init" == "--init" ]; then
    # right device?
    lsblk -f $dev
    sfdisk -l $dev 2>&1 | egrep '^/dev'
    echo -n "We are going to rewrite the entire device, ok? yN: "
    read ok
    if [[ "$ok" != 'y' && $ok != 'Y' ]]; then
        echo "aborted"
        exit 2
    fi

    # unmount before dd
    if mount -l | grep $dev >/dev/null; then
        echo "unmounting..."
        # lsblk often shows only known/mounted
        lsblk -l -n -o NAME $dev | xargs --no-run-if-empty -n 1 -ix umount /dev/x
    fi

    # copy image
    args="dd status=progress bs=4M if=$img of=$dev"
    echo
    echo $args
    echo -n "Confirm that yN: "
    read ok
    if [[ "$ok" != 'y' && $ok != 'Y' ]]; then
        echo "aborted"
        exit 2
    fi
    $args

    # should show more info
    lsblk -f /dev/mmcblk0
fi

# Mount

# Try to find the subdev to mount
rootfs=`sfdisk -l $dev 2>&1 | egrep '^/dev' | egrep ' Linux$' | awk '{print $1}'`
if [ "$rootfs" == '' ]; then
    echo "Couldn't deduce the sub-device of $dev";
    exit 1
fi
dir=/mnt/pimnt
mkdir -p $dir
if ! mount -l | grep $dev >/dev/null; then
    { set -x 
    mount $rootfs $dir 
    }
fi
if ! mount -l | grep $dev >/dev/null; then
    echo "Failed to mount $dev"
    exit 1
fi
lsblk -f $dev

# Configure

{ set -x
env WIFI=$WIFI SDROOTFS=$dir make config_sd$PI
}
